// Code generated by mockery. DO NOT EDIT.

package servicesmocks

import (
	courier "delivery/internal/core/domain/model/courier"

	mock "github.com/stretchr/testify/mock"

	order "delivery/internal/core/domain/model/order"
)

// OrderDispatcherMock is an autogenerated mock type for the OrderDispatcher type
type OrderDispatcherMock struct {
	mock.Mock
}

type OrderDispatcherMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderDispatcherMock) EXPECT() *OrderDispatcherMock_Expecter {
	return &OrderDispatcherMock_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: _a0, couriers
func (_m *OrderDispatcherMock) Dispatch(_a0 *order.Order, couriers []*courier.Courier) (*courier.Courier, error) {
	ret := _m.Called(_a0, couriers)

	if len(ret) == 0 {
		panic("no return value specified for Dispatch")
	}

	var r0 *courier.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(*order.Order, []*courier.Courier) (*courier.Courier, error)); ok {
		return rf(_a0, couriers)
	}
	if rf, ok := ret.Get(0).(func(*order.Order, []*courier.Courier) *courier.Courier); ok {
		r0 = rf(_a0, couriers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*courier.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(*order.Order, []*courier.Courier) error); ok {
		r1 = rf(_a0, couriers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderDispatcherMock_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type OrderDispatcherMock_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//   - _a0 *order.Order
//   - couriers []*courier.Courier
func (_e *OrderDispatcherMock_Expecter) Dispatch(_a0 interface{}, couriers interface{}) *OrderDispatcherMock_Dispatch_Call {
	return &OrderDispatcherMock_Dispatch_Call{Call: _e.mock.On("Dispatch", _a0, couriers)}
}

func (_c *OrderDispatcherMock_Dispatch_Call) Run(run func(_a0 *order.Order, couriers []*courier.Courier)) *OrderDispatcherMock_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*order.Order), args[1].([]*courier.Courier))
	})
	return _c
}

func (_c *OrderDispatcherMock_Dispatch_Call) Return(_a0 *courier.Courier, _a1 error) *OrderDispatcherMock_Dispatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderDispatcherMock_Dispatch_Call) RunAndReturn(run func(*order.Order, []*courier.Courier) (*courier.Courier, error)) *OrderDispatcherMock_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderDispatcherMock creates a new instance of OrderDispatcherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderDispatcherMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderDispatcherMock {
	mock := &OrderDispatcherMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
