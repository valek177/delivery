// Code generated by mockery. DO NOT EDIT.

package queriesmocks

import (
	queries "delivery/internal/core/application/usecases/queries"

	mock "github.com/stretchr/testify/mock"
)

// GetCouriersQueryHandlerMock is an autogenerated mock type for the GetCouriersQueryHandler type
type GetCouriersQueryHandlerMock struct {
	mock.Mock
}

type GetCouriersQueryHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GetCouriersQueryHandlerMock) EXPECT() *GetCouriersQueryHandlerMock_Expecter {
	return &GetCouriersQueryHandlerMock_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: _a0
func (_m *GetCouriersQueryHandlerMock) Handle(_a0 queries.GetCouriersQuery) (queries.GetCouriersResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 queries.GetCouriersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(queries.GetCouriersQuery) (queries.GetCouriersResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(queries.GetCouriersQuery) queries.GetCouriersResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(queries.GetCouriersResponse)
	}

	if rf, ok := ret.Get(1).(func(queries.GetCouriersQuery) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCouriersQueryHandlerMock_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type GetCouriersQueryHandlerMock_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 queries.GetCouriersQuery
func (_e *GetCouriersQueryHandlerMock_Expecter) Handle(_a0 interface{}) *GetCouriersQueryHandlerMock_Handle_Call {
	return &GetCouriersQueryHandlerMock_Handle_Call{Call: _e.mock.On("Handle", _a0)}
}

func (_c *GetCouriersQueryHandlerMock_Handle_Call) Run(run func(_a0 queries.GetCouriersQuery)) *GetCouriersQueryHandlerMock_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(queries.GetCouriersQuery))
	})
	return _c
}

func (_c *GetCouriersQueryHandlerMock_Handle_Call) Return(_a0 queries.GetCouriersResponse, _a1 error) *GetCouriersQueryHandlerMock_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetCouriersQueryHandlerMock_Handle_Call) RunAndReturn(run func(queries.GetCouriersQuery) (queries.GetCouriersResponse, error)) *GetCouriersQueryHandlerMock_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetCouriersQueryHandlerMock creates a new instance of GetCouriersQueryHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetCouriersQueryHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetCouriersQueryHandlerMock {
	mock := &GetCouriersQueryHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
