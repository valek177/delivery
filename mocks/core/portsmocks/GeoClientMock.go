// Code generated by mockery. DO NOT EDIT.

package portsmocks

import (
	context "context"
	kernel "delivery/internal/core/domain/kernel"

	mock "github.com/stretchr/testify/mock"
)

// GeoClientMock is an autogenerated mock type for the GeoClient type
type GeoClientMock struct {
	mock.Mock
}

type GeoClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GeoClientMock) EXPECT() *GeoClientMock_Expecter {
	return &GeoClientMock_Expecter{mock: &_m.Mock}
}

// GetGeolocation provides a mock function with given fields: ctx, street
func (_m *GeoClientMock) GetGeolocation(ctx context.Context, street string) (kernel.Location, error) {
	ret := _m.Called(ctx, street)

	if len(ret) == 0 {
		panic("no return value specified for GetGeolocation")
	}

	var r0 kernel.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (kernel.Location, error)); ok {
		return rf(ctx, street)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) kernel.Location); ok {
		r0 = rf(ctx, street)
	} else {
		r0 = ret.Get(0).(kernel.Location)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, street)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeoClientMock_GetGeolocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeolocation'
type GeoClientMock_GetGeolocation_Call struct {
	*mock.Call
}

// GetGeolocation is a helper method to define mock.On call
//   - ctx context.Context
//   - street string
func (_e *GeoClientMock_Expecter) GetGeolocation(ctx interface{}, street interface{}) *GeoClientMock_GetGeolocation_Call {
	return &GeoClientMock_GetGeolocation_Call{Call: _e.mock.On("GetGeolocation", ctx, street)}
}

func (_c *GeoClientMock_GetGeolocation_Call) Run(run func(ctx context.Context, street string)) *GeoClientMock_GetGeolocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GeoClientMock_GetGeolocation_Call) Return(_a0 kernel.Location, _a1 error) *GeoClientMock_GetGeolocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeoClientMock_GetGeolocation_Call) RunAndReturn(run func(context.Context, string) (kernel.Location, error)) *GeoClientMock_GetGeolocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeoClientMock creates a new instance of GeoClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeoClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeoClientMock {
	mock := &GeoClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
