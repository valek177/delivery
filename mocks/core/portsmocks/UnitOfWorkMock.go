// Code generated by mockery. DO NOT EDIT.

package portsmocks

import (
	context "context"
	ports "delivery/internal/core/ports"

	mock "github.com/stretchr/testify/mock"
)

// UnitOfWorkMock is an autogenerated mock type for the UnitOfWork type
type UnitOfWorkMock struct {
	mock.Mock
}

type UnitOfWorkMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UnitOfWorkMock) EXPECT() *UnitOfWorkMock_Expecter {
	return &UnitOfWorkMock_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *UnitOfWorkMock) Begin(ctx context.Context) {
	_m.Called(ctx)
}

// UnitOfWorkMock_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type UnitOfWorkMock_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UnitOfWorkMock_Expecter) Begin(ctx interface{}) *UnitOfWorkMock_Begin_Call {
	return &UnitOfWorkMock_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *UnitOfWorkMock_Begin_Call) Run(run func(ctx context.Context)) *UnitOfWorkMock_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UnitOfWorkMock_Begin_Call) Return() *UnitOfWorkMock_Begin_Call {
	_c.Call.Return()
	return _c
}

func (_c *UnitOfWorkMock_Begin_Call) RunAndReturn(run func(context.Context)) *UnitOfWorkMock_Begin_Call {
	_c.Run(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *UnitOfWorkMock) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWorkMock_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type UnitOfWorkMock_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UnitOfWorkMock_Expecter) Commit(ctx interface{}) *UnitOfWorkMock_Commit_Call {
	return &UnitOfWorkMock_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *UnitOfWorkMock_Commit_Call) Run(run func(ctx context.Context)) *UnitOfWorkMock_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UnitOfWorkMock_Commit_Call) Return(_a0 error) *UnitOfWorkMock_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWorkMock_Commit_Call) RunAndReturn(run func(context.Context) error) *UnitOfWorkMock_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// CourierRepository provides a mock function with no fields
func (_m *UnitOfWorkMock) CourierRepository() ports.CourierRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CourierRepository")
	}

	var r0 ports.CourierRepository
	if rf, ok := ret.Get(0).(func() ports.CourierRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.CourierRepository)
		}
	}

	return r0
}

// UnitOfWorkMock_CourierRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CourierRepository'
type UnitOfWorkMock_CourierRepository_Call struct {
	*mock.Call
}

// CourierRepository is a helper method to define mock.On call
func (_e *UnitOfWorkMock_Expecter) CourierRepository() *UnitOfWorkMock_CourierRepository_Call {
	return &UnitOfWorkMock_CourierRepository_Call{Call: _e.mock.On("CourierRepository")}
}

func (_c *UnitOfWorkMock_CourierRepository_Call) Run(run func()) *UnitOfWorkMock_CourierRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnitOfWorkMock_CourierRepository_Call) Return(_a0 ports.CourierRepository) *UnitOfWorkMock_CourierRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWorkMock_CourierRepository_Call) RunAndReturn(run func() ports.CourierRepository) *UnitOfWorkMock_CourierRepository_Call {
	_c.Call.Return(run)
	return _c
}

// OrderRepository provides a mock function with no fields
func (_m *UnitOfWorkMock) OrderRepository() ports.OrderRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OrderRepository")
	}

	var r0 ports.OrderRepository
	if rf, ok := ret.Get(0).(func() ports.OrderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.OrderRepository)
		}
	}

	return r0
}

// UnitOfWorkMock_OrderRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderRepository'
type UnitOfWorkMock_OrderRepository_Call struct {
	*mock.Call
}

// OrderRepository is a helper method to define mock.On call
func (_e *UnitOfWorkMock_Expecter) OrderRepository() *UnitOfWorkMock_OrderRepository_Call {
	return &UnitOfWorkMock_OrderRepository_Call{Call: _e.mock.On("OrderRepository")}
}

func (_c *UnitOfWorkMock_OrderRepository_Call) Run(run func()) *UnitOfWorkMock_OrderRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnitOfWorkMock_OrderRepository_Call) Return(_a0 ports.OrderRepository) *UnitOfWorkMock_OrderRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWorkMock_OrderRepository_Call) RunAndReturn(run func() ports.OrderRepository) *UnitOfWorkMock_OrderRepository_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackUnlessCommitted provides a mock function with given fields: ctx
func (_m *UnitOfWorkMock) RollbackUnlessCommitted(ctx context.Context) {
	_m.Called(ctx)
}

// UnitOfWorkMock_RollbackUnlessCommitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackUnlessCommitted'
type UnitOfWorkMock_RollbackUnlessCommitted_Call struct {
	*mock.Call
}

// RollbackUnlessCommitted is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UnitOfWorkMock_Expecter) RollbackUnlessCommitted(ctx interface{}) *UnitOfWorkMock_RollbackUnlessCommitted_Call {
	return &UnitOfWorkMock_RollbackUnlessCommitted_Call{Call: _e.mock.On("RollbackUnlessCommitted", ctx)}
}

func (_c *UnitOfWorkMock_RollbackUnlessCommitted_Call) Run(run func(ctx context.Context)) *UnitOfWorkMock_RollbackUnlessCommitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UnitOfWorkMock_RollbackUnlessCommitted_Call) Return() *UnitOfWorkMock_RollbackUnlessCommitted_Call {
	_c.Call.Return()
	return _c
}

func (_c *UnitOfWorkMock_RollbackUnlessCommitted_Call) RunAndReturn(run func(context.Context)) *UnitOfWorkMock_RollbackUnlessCommitted_Call {
	_c.Run(run)
	return _c
}

// NewUnitOfWorkMock creates a new instance of UnitOfWorkMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitOfWorkMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitOfWorkMock {
	mock := &UnitOfWorkMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
