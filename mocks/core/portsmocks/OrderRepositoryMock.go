// Code generated by mockery. DO NOT EDIT.

package portsmocks

import (
	context "context"
	order "delivery/internal/core/domain/model/order"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// OrderRepositoryMock is an autogenerated mock type for the OrderRepository type
type OrderRepositoryMock struct {
	mock.Mock
}

type OrderRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepositoryMock) EXPECT() *OrderRepositoryMock_Expecter {
	return &OrderRepositoryMock_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, aggregate
func (_m *OrderRepositoryMock) Add(ctx context.Context, aggregate *order.Order) error {
	ret := _m.Called(ctx, aggregate)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = rf(ctx, aggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepositoryMock_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type OrderRepositoryMock_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - aggregate *order.Order
func (_e *OrderRepositoryMock_Expecter) Add(ctx interface{}, aggregate interface{}) *OrderRepositoryMock_Add_Call {
	return &OrderRepositoryMock_Add_Call{Call: _e.mock.On("Add", ctx, aggregate)}
}

func (_c *OrderRepositoryMock_Add_Call) Run(run func(ctx context.Context, aggregate *order.Order)) *OrderRepositoryMock_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.Order))
	})
	return _c
}

func (_c *OrderRepositoryMock_Add_Call) Return(_a0 error) *OrderRepositoryMock_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepositoryMock_Add_Call) RunAndReturn(run func(context.Context, *order.Order) error) *OrderRepositoryMock_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, ID
func (_m *OrderRepositoryMock) Get(ctx context.Context, ID uuid.UUID) (*order.Order, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*order.Order, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *order.Order); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderRepositoryMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *OrderRepositoryMock_Expecter) Get(ctx interface{}, ID interface{}) *OrderRepositoryMock_Get_Call {
	return &OrderRepositoryMock_Get_Call{Call: _e.mock.On("Get", ctx, ID)}
}

func (_c *OrderRepositoryMock_Get_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *OrderRepositoryMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *OrderRepositoryMock_Get_Call) Return(_a0 *order.Order, _a1 error) *OrderRepositoryMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryMock_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*order.Order, error)) *OrderRepositoryMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllInAssignedStatus provides a mock function with given fields: ctx
func (_m *OrderRepositoryMock) GetAllInAssignedStatus(ctx context.Context) ([]*order.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllInAssignedStatus")
	}

	var r0 []*order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*order.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*order.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryMock_GetAllInAssignedStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInAssignedStatus'
type OrderRepositoryMock_GetAllInAssignedStatus_Call struct {
	*mock.Call
}

// GetAllInAssignedStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OrderRepositoryMock_Expecter) GetAllInAssignedStatus(ctx interface{}) *OrderRepositoryMock_GetAllInAssignedStatus_Call {
	return &OrderRepositoryMock_GetAllInAssignedStatus_Call{Call: _e.mock.On("GetAllInAssignedStatus", ctx)}
}

func (_c *OrderRepositoryMock_GetAllInAssignedStatus_Call) Run(run func(ctx context.Context)) *OrderRepositoryMock_GetAllInAssignedStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OrderRepositoryMock_GetAllInAssignedStatus_Call) Return(_a0 []*order.Order, _a1 error) *OrderRepositoryMock_GetAllInAssignedStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryMock_GetAllInAssignedStatus_Call) RunAndReturn(run func(context.Context) ([]*order.Order, error)) *OrderRepositoryMock_GetAllInAssignedStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstInCreatedStatus provides a mock function with given fields: ctx
func (_m *OrderRepositoryMock) GetFirstInCreatedStatus(ctx context.Context) (*order.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstInCreatedStatus")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*order.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *order.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryMock_GetFirstInCreatedStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstInCreatedStatus'
type OrderRepositoryMock_GetFirstInCreatedStatus_Call struct {
	*mock.Call
}

// GetFirstInCreatedStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OrderRepositoryMock_Expecter) GetFirstInCreatedStatus(ctx interface{}) *OrderRepositoryMock_GetFirstInCreatedStatus_Call {
	return &OrderRepositoryMock_GetFirstInCreatedStatus_Call{Call: _e.mock.On("GetFirstInCreatedStatus", ctx)}
}

func (_c *OrderRepositoryMock_GetFirstInCreatedStatus_Call) Run(run func(ctx context.Context)) *OrderRepositoryMock_GetFirstInCreatedStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OrderRepositoryMock_GetFirstInCreatedStatus_Call) Return(_a0 *order.Order, _a1 error) *OrderRepositoryMock_GetFirstInCreatedStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryMock_GetFirstInCreatedStatus_Call) RunAndReturn(run func(context.Context) (*order.Order, error)) *OrderRepositoryMock_GetFirstInCreatedStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, aggregate
func (_m *OrderRepositoryMock) Update(ctx context.Context, aggregate *order.Order) error {
	ret := _m.Called(ctx, aggregate)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = rf(ctx, aggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrderRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - aggregate *order.Order
func (_e *OrderRepositoryMock_Expecter) Update(ctx interface{}, aggregate interface{}) *OrderRepositoryMock_Update_Call {
	return &OrderRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, aggregate)}
}

func (_c *OrderRepositoryMock_Update_Call) Run(run func(ctx context.Context, aggregate *order.Order)) *OrderRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.Order))
	})
	return _c
}

func (_c *OrderRepositoryMock_Update_Call) Return(_a0 error) *OrderRepositoryMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepositoryMock_Update_Call) RunAndReturn(run func(context.Context, *order.Order) error) *OrderRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepositoryMock creates a new instance of OrderRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepositoryMock {
	mock := &OrderRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
